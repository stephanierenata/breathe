[{"/Users/stephanierenata/breathe/breathe/src/index.js":"1","/Users/stephanierenata/breathe/breathe/src/reportWebVitals.js":"2","/Users/stephanierenata/breathe/breathe/src/App.js":"3","/Users/stephanierenata/breathe/breathe/src/components/b/Breath.js":"4","/Users/stephanierenata/breathe/breathe/src/components/Home.js":"5","/Users/stephanierenata/breathe/breathe/src/components/f/Focus.js":"6","/Users/stephanierenata/breathe/breathe/src/components/s/Sleep.js":"7","/Users/stephanierenata/breathe/breathe/src/components/m/Meditation.js":"8","/Users/stephanierenata/breathe/breathe/src/components/NavBar.js":"9","/Users/stephanierenata/breathe/breathe/src/components/f/Break.js":"10","/Users/stephanierenata/breathe/breathe/src/components/f/Session.js":"11","/Users/stephanierenata/breathe/breathe/src/components/f/TimeLeft.js":"12"},{"size":500,"mtime":1611713585743,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1611713585744,"results":"15","hashOfConfig":"14"},{"size":779,"mtime":1611814395604,"results":"16","hashOfConfig":"14"},{"size":485,"mtime":1611807315525,"results":"17","hashOfConfig":"14"},{"size":1161,"mtime":1613612394810,"results":"18","hashOfConfig":"14"},{"size":3242,"mtime":1613614135529,"results":"19","hashOfConfig":"14"},{"size":1536,"mtime":1614578774557,"results":"20","hashOfConfig":"14"},{"size":3077,"mtime":1611815645367,"results":"21","hashOfConfig":"14"},{"size":643,"mtime":1611733103591,"results":"22","hashOfConfig":"14"},{"size":554,"mtime":1612933251242,"results":"23","hashOfConfig":"14"},{"size":588,"mtime":1612933181232,"results":"24","hashOfConfig":"14"},{"size":651,"mtime":1613613307894,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"a6bqam",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/stephanierenata/breathe/breathe/src/index.js",[],["54","55"],"/Users/stephanierenata/breathe/breathe/src/reportWebVitals.js",[],"/Users/stephanierenata/breathe/breathe/src/App.js",[],"/Users/stephanierenata/breathe/breathe/src/components/b/Breath.js",[],"/Users/stephanierenata/breathe/breathe/src/components/Home.js",[],"/Users/stephanierenata/breathe/breathe/src/components/f/Focus.js",["56"],"import React, { useState, useEffect, useRef } from 'react';\nimport NavBar from '../NavBar'\nimport Break from './Break';\nimport Session from './Session';\nimport TimeLeft from './TimeLeft';\n\nconst Focus = () => {\n\n  const audioElement = useRef(null)\n  const [currentSessionType, setCurrentSessionType] = useState('Session');\n  const [intervalId, setIntervalId] = useState(null);\n\n  const [sessionLength, setSessionLength] = useState(300)\n  const decrementByOne = () => {\n    const newSessionLength = sessionLength - 60;\n\n    if (newSessionLength < 0) {\n      setSessionLength(0);\n    } else {\n      setSessionLength(newSessionLength);\n    }\n  }\n\n  const incrementByOne = () => {\n    setSessionLength(sessionLength + 60);\n  }\n\n  const [breakLength, setBreakLength] = useState(300)\n  const decrementBreakByOne = () => {\n    const newBreakLength = breakLength - 60;\n\n    if (newBreakLength < 0) {\n      setBreakLength(0);\n    } else {\n      setBreakLength(newBreakLength);\n    }\n  }\n\n  const incrementBreakByOne = () => {\n    setBreakLength(breakLength + 60);\n  }\n\n  const handleResetButton = () => {\n    setIntervalId(null);\n    setCurrentSessionType('Session');\n    setSessionLength(60*25);\n    setBreakLength(60*5);\n    setTimeLeft(60*25);\n    audioElement.current.load();\n  }\n\n  const isStarted = intervalId !== null;\n\n  const handleStartStopClick = () => {\n    //start mode\n    if (isStarted) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    } else {\n      //stop mode\n      const newIntervalId = setInterval(() => {\n        setTimeLeft(prevTimeLeft => {\n          const newTimeLeft = prevTimeLeft - 1;\n          if (newTimeLeft >= 0) {\n            return prevTimeLeft - 1;\n          }\n          //play sound when current time ends\n          audioElement.current.play();\n          //switch between session and break\n          if (currentSessionType === 'Session') {\n            setCurrentSessionType('Break');\n            setTimeLeft(breakLength);\n          } else if (currentSessionType === 'Break') {\n            setCurrentSessionType('Session');\n            setTimeLeft(sessionLength);\n          }\n          return prevTimeLeft;\n        });\n      }, 1000);\n      setIntervalId(newIntervalId);\n    }\n  };\n\n  const [timeLeft, setTimeLeft] = useState(sessionLength);\n\n  useEffect(() => {\n    setTimeLeft(sessionLength);\n  }, [sessionLength])\n\n  return (\n    <div className=\"Focus\">\n      <NavBar />\n      <h1>Focus</h1>\n      <Break breakLength={breakLength} \n      incrementByOne={incrementBreakByOne} \n      decrementByOne={decrementBreakByOne} />\n\n      <Session sessionLength={sessionLength} \n      incrementByOne={incrementByOne} \n      decrementByOne={decrementByOne} />\n\n      <TimeLeft breakLength={breakLength}\n        sessionLength={sessionLength}\n        timerLabel={currentSessionType}\n        handleStartStopClick={handleStartStopClick}\n        isStarted={isStarted}\n        timeLeft={timeLeft}\n        intervalId={intervalId}\n        timeLeft={timeLeft} />\n      \n      <button onClick={handleResetButton}>Reset</button>\n\n      <audio ref={audioElement}>\n        <source src = \"https://onlineclock.net/audio/options/default.mp3\" type=\"audio/mpeg\" />\n      </audio>\n    \n    </div>\n  );\n};\n\nexport default Focus;","/Users/stephanierenata/breathe/breathe/src/components/s/Sleep.js",["57"],"/Users/stephanierenata/breathe/breathe/src/components/m/Meditation.js",[],"/Users/stephanierenata/breathe/breathe/src/components/NavBar.js",[],"/Users/stephanierenata/breathe/breathe/src/components/f/Break.js",["58"],"import React, { useState } from 'react';\nimport moment from 'moment';\n\nconst Break = props => {\n    const{ breakLength, incrementByOne, decrementByOne} = props;\n\n    const breakInMin = moment.duration(breakLength, 's').minutes();\n\n    return (\n        <div className=\"Break\">\n            <h4>Break</h4>\n            \n            <button id=\"increment\" onClick={incrementByOne}> + </button>\n            <p>{breakInMin}</p>\n            <button id=\"decrement\" onClick={decrementByOne}> - </button>\n            \n        </div>\n    );\n};\n\nexport default Break;","/Users/stephanierenata/breathe/breathe/src/components/f/Session.js",["59"],"import React, { useState } from 'react';\nimport moment from 'moment';\n\nconst Session = props => {\n\n    const{\n        sessionLength, incrementByOne, decrementByOne\n    } = props;\n    \n    const sessionInMin = moment.duration(sessionLength, 's').minutes();\n\n    return (\n        <div className=\"Session\">\n            <h4>Session</h4>\n            \n            <button id=\"increment\" onClick={incrementByOne}> + </button>\n            <p>{sessionInMin}</p>\n            <button id=\"decrement\" onClick={decrementByOne}> - </button>\n            \n        </div>\n    );\n};\n\nexport default Session;","/Users/stephanierenata/breathe/breathe/src/components/f/TimeLeft.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":109,"column":9,"nodeType":"66","endLine":109,"endColumn":28},{"ruleId":"67","severity":1,"message":"68","line":40,"column":32,"nodeType":"69","messageId":"70","endLine":40,"endColumn":34},{"ruleId":"71","severity":1,"message":"72","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"72","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]